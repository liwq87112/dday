/*
 * QRCodeReaderViewController
 *
 * Copyright 2014-present Yannick Loriot.
 * http://yannickloriot.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

#import "QRCodeReaderView.h"
#import <AVFoundation/AVFoundation.h>
#import "PrefixHeader.pch"
/** 扫描内容的Y值 */
#define scanContent_Y self.frame.size.height * 0.24
/** 扫描内容的Y值 */
#define scanContent_X self.frame.size.width * 0.15

@interface QRCodeReaderView ()
@property (nonatomic, strong) CALayer *basedLayer;
@property (nonatomic, strong) AVCaptureDevice *device;
/** 扫描动画线(冲击波) */
@property (nonatomic, strong) UIImageView *animation_line;
@property (nonatomic, strong) NSTimer *timer;

@end

@implementation QRCodeReaderView

/** 扫描动画线(冲击波) 的高度 */
static CGFloat const animation_line_H = 2.0;
/** 扫描内容外部View的alpha值 */
static CGFloat const scanBorderOutsideViewAlpha = 0.4;
/** 定时器和动画的时间 */
static CGFloat const timer_animation_Duration = 0.05;

- (instancetype)initWithFrame:(CGRect)frame outsideViewLayer:(CALayer *)outsideViewLayer {
    if (self = [super initWithFrame:frame]) {
        _basedLayer = outsideViewLayer;
        // 创建扫描边框
        [self setupScanningQRCodeEdging];
    }
    return self;
}

+ (instancetype)scanningQRCodeViewWithFrame:(CGRect)frame outsideViewLayer:(CALayer *)outsideViewLayer {
    return [[self alloc] initWithFrame:frame outsideViewLayer:outsideViewLayer];
}

// 创建扫描边框
- (void)setupScanningQRCodeEdging {
// 扫描内容的创建
    UIView *scanContentView = [[UIView alloc] init];
    CGFloat scanContentViewX = scanContent_X;
    CGFloat scanContentViewY = scanContent_Y;
    CGFloat scanContentViewW = self.frame.size.width - 2 * scanContent_X;
    CGFloat scanContentViewH = scanContentViewW;
    scanContentView.frame = CGRectMake(scanContentViewX, scanContentViewY, scanContentViewW, scanContentViewH);
    scanContentView.layer.borderColor = [[UIColor whiteColor] colorWithAlphaComponent:0.6].CGColor;
    scanContentView.layer.borderWidth = 0.7;
    scanContentView.backgroundColor = [UIColor clearColor];
    [self.basedLayer addSublayer:scanContentView.layer];
    
// 扫描动画添加
    self.animation_line = [[UIImageView alloc] init];
    _animation_line.image = [UIImage imageNamed:@"img_line"];
    _animation_line.frame = CGRectMake(scanContent_X * 0.5, scanContentViewY, self.frame.size.width - scanContent_X , animation_line_H);
    [self.basedLayer addSublayer:_animation_line.layer];
    
// 添加定时器
    self.timer =[NSTimer scheduledTimerWithTimeInterval:timer_animation_Duration target:self selector:@selector(animation_line_action) userInfo:nil repeats:YES];
    
#pragma mark - - - 扫描外部View的创建
// 顶部View的创建
    UIView *top_View = [[UIView alloc] init];
    CGFloat top_ViewX = 0;
    CGFloat top_ViewY = 0;
    CGFloat top_ViewW = self.frame.size.width;
    CGFloat top_ViewH = scanContentViewY;
    top_View.frame = CGRectMake(top_ViewX, top_ViewY, top_ViewW, top_ViewH);
    top_View.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:scanBorderOutsideViewAlpha];
    [self addSubview:top_View];
    
// 左侧View的创建
    UIView *left_View = [[UIView alloc] init];
    CGFloat left_ViewX = 0;
    CGFloat left_ViewY = scanContentViewY;
    CGFloat left_ViewW = scanContent_X;
    CGFloat left_ViewH = scanContentViewH;
    left_View.frame = CGRectMake(left_ViewX, left_ViewY, left_ViewW, left_ViewH);
    left_View.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:scanBorderOutsideViewAlpha];
    [self addSubview:left_View];

// 右侧View的创建
    UIView *right_View = [[UIView alloc] init];
    CGFloat right_ViewX = CGRectGetMaxX(scanContentView.frame);
    CGFloat right_ViewY = scanContentViewY;
    CGFloat right_ViewW = scanContent_X;
    CGFloat right_ViewH = scanContentViewH;
    right_View.frame = CGRectMake(right_ViewX, right_ViewY, right_ViewW, right_ViewH);
    right_View.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:scanBorderOutsideViewAlpha];
    [self addSubview:right_View];
    
// 下面View的创建
    UIView *bottom_View = [[UIView alloc] init];
    CGFloat bottom_ViewX = 0;
    CGFloat bottom_ViewY = CGRectGetMaxY(scanContentView.frame);
    CGFloat bottom_ViewW = self.frame.size.width;
    CGFloat bottom_ViewH = self.frame.size.height - bottom_ViewY;
    bottom_View.frame = CGRectMake(bottom_ViewX, bottom_ViewY, bottom_ViewW, bottom_ViewH);
    bottom_View.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:scanBorderOutsideViewAlpha];
    [self addSubview:bottom_View];
    
// 提示Label
    UILabel *promptLabel = [[UILabel alloc] init];
    promptLabel.backgroundColor = [UIColor clearColor];
    CGFloat promptLabelX = 0;
    CGFloat promptLabelY = scanContent_X * 0.5;
    CGFloat promptLabelW = self.frame.size.width;
    CGFloat promptLabelH = 25;
    promptLabel.frame = CGRectMake(promptLabelX, promptLabelY, promptLabelW, promptLabelH);
    promptLabel.textAlignment = NSTextAlignmentCenter;
    promptLabel.font = [UIFont boldSystemFontOfSize:13.0];
    promptLabel.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.6];
    promptLabel.text = @"将二维码放入框内，即可自动扫描";
    [bottom_View addSubview:promptLabel];
    
// 添加闪光灯按钮
    UIButton *light_button = [[UIButton alloc] init];
    CGFloat light_buttonX = CGRectGetMaxY(promptLabel.frame) + scanContent_Y * 0.6;
    CGFloat light_buttonY = CGRectGetMaxY(promptLabel.frame) + scanContent_X * 0.5;
    CGFloat light_buttonW = 35;
    CGFloat light_buttonH = 35;
    light_button.frame = CGRectMake(light_buttonX, light_buttonY, light_buttonW, light_buttonH);

    [light_button setBackgroundImage:[UIImage imageNamed:@"ic_lamp_normal"] forState:UIControlStateNormal];
    [light_button setBackgroundImage:[UIImage imageNamed:@"ic_lamp_pressed"] forState:UIControlStateSelected];
    
    [light_button addTarget:self action:@selector(light_buttonAction:) forControlEvents:UIControlEventTouchUpInside];
    [bottom_View addSubview:light_button];

    
//    //开关灯button
//    UIButton * turnBtn = [UIButton buttonWithType:UIButtonTypeCustom];
//    turnBtn.backgroundColor = [UIColor clearColor];
//    [turnBtn setBackgroundImage:[UIImage imageNamed:@"ic_lamp_normal"] forState:UIControlStateNormal];
//    [turnBtn setBackgroundImage:[UIImage imageNamed:@"ic_lamp_pressed"] forState:UIControlStateSelected];
//    turnBtn.frame=CGRectMake((DeviceMaxWidth-50*widthRate)/2, (CGRectGetHeight(downView.frame)-50*widthRate)/2, 35*widthRate, 35*widthRate);
//    [turnBtn addTarget:self action:@selector(turnBtnEvent:) forControlEvents:UIControlEventTouchUpInside];
//    [downView addSubview:turnBtn];
#pragma mark - - - 扫描边角imageView的创建
// 左上侧的image
    CGFloat margin = 7;
    
    UIImage *left_image = [UIImage imageNamed:@"img_scanning1"];
    UIImageView *left_imageView = [[UIImageView alloc] init];
    CGFloat left_imageViewX = CGRectGetMinX(scanContentView.frame) - left_image.size.width * 0.5 + margin;
    CGFloat left_imageViewY = CGRectGetMinY(scanContentView.frame) - left_image.size.width * 0.5 + margin;
    CGFloat left_imageViewW = left_image.size.width;
    CGFloat left_imageViewH = left_image.size.height;
    left_imageView.frame = CGRectMake(left_imageViewX, left_imageViewY, left_imageViewW, left_imageViewH);
    left_imageView.image = left_image;
    [self.basedLayer addSublayer:left_imageView.layer];
    
// 右上侧的image
    UIImage *right_image = [UIImage imageNamed:@"img_scanning4"];
    UIImageView *right_imageView = [[UIImageView alloc] init];
    CGFloat right_imageViewX = CGRectGetMaxX(scanContentView.frame) - right_image.size.width * 0.5 - margin;
    CGFloat right_imageViewY = left_imageView.frame.origin.y;
    CGFloat right_imageViewW = left_image.size.width;
    CGFloat right_imageViewH = left_image.size.height;
    right_imageView.frame = CGRectMake(right_imageViewX, right_imageViewY, right_imageViewW, right_imageViewH);
    right_imageView.image = right_image;
    [self.basedLayer addSublayer:right_imageView.layer];
    
// 左下侧的image （修改过。删掉3.5即可）
    UIImage *left_image_down = [UIImage imageNamed:@"img_scanning3"];
    UIImageView *left_imageView_down = [[UIImageView alloc] init];
    CGFloat left_imageView_downX = left_imageView.frame.origin.x;
    CGFloat left_imageView_downY = CGRectGetMaxY(scanContentView.frame) - left_image_down.size.width * 0.5 - margin;
    CGFloat left_imageView_downW = left_image.size.width;
    CGFloat left_imageView_downH = left_image.size.height;
    left_imageView_down.frame = CGRectMake(left_imageView_downX, left_imageView_downY, left_imageView_downW, left_imageView_downH);
    left_imageView_down.image = left_image_down;
    [self.basedLayer addSublayer:left_imageView_down.layer];
    
// 右下侧的image
    UIImage *right_image_down = [UIImage imageNamed:@"img_scanning2"];
    UIImageView *right_imageView_down = [[UIImageView alloc] init];
    CGFloat right_imageView_downX = right_imageView.frame.origin.x;
    CGFloat right_imageView_downY = left_imageView_down.frame.origin.y;
    CGFloat right_imageView_downW = left_image.size.width;
    CGFloat right_imageView_downH = left_image.size.height;
    right_imageView_down.frame = CGRectMake(right_imageView_downX, right_imageView_downY, right_imageView_downW, right_imageView_downH);
    right_imageView_down.image = right_image_down;
    [self.basedLayer addSublayer:right_imageView_down.layer];
    
}

#pragma mark - - - 照明灯的点击事件
- (void)light_buttonAction:(UIButton *)button {
    if (button.selected == NO) { // 点击打开照明灯
        [self turnOnLight:YES];
        button.selected = YES;
    } else { // 点击关闭照明灯
        [self turnOnLight:NO];
        button.selected = NO;
    }
}

- (void)turnOnLight:(BOOL)on {
    self.device = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];
    if ([_device hasTorch]) {
        [_device lockForConfiguration:nil];
        if (on) {
            [_device setTorchMode:AVCaptureTorchModeOn];
        } else {
            [_device setTorchMode: AVCaptureTorchModeOff];
        }
        [_device unlockForConfiguration];
    }
}

#pragma mark - - - 执行定时器方法
- (void)animation_line_action {
    __block CGRect frame = _animation_line.frame;
    
    static BOOL flag = YES;
    
    if (flag) {
        frame.origin.y = scanContent_Y;
        flag = NO;
        [UIView animateWithDuration:timer_animation_Duration animations:^{
            frame.origin.y += 5;
            _animation_line.frame = frame;
        } completion:nil];
    } else {
        if (_animation_line.frame.origin.y >= scanContent_Y) {
            CGFloat scanContent_MaxY = scanContent_Y + self.frame.size.width - 2 * scanContent_X;
            if (_animation_line.frame.origin.y >= scanContent_MaxY - 5) {
                frame.origin.y = scanContent_Y;
                _animation_line.frame = frame;
                flag = YES;
            } else {
                [UIView animateWithDuration:timer_animation_Duration animations:^{
                    frame.origin.y += 5;
                    _animation_line.frame = frame;
                } completion:nil];
            }
        } else {
            flag = !flag;
        }
    }
}

/** 移除定时器 */
- (void)removeTimer {
    [self.timer invalidate];
}


//- (void)instanceDevice
//{
//    //扫描区域
//    UIImage *hbImage=[UIImage imageNamed:@"img_scanning"];
//    UIImageView * scanZomeBack=[[UIImageView alloc] init];
//    scanZomeBack.backgroundColor = [UIColor clearColor];
//    scanZomeBack.layer.borderColor = [UIColor whiteColor].CGColor;
//    scanZomeBack.layer.borderWidth = 2.5;
//    scanZomeBack.image = hbImage;
//    //添加一个背景图片 60 200 200 200 
//    CGRect mImagerect = CGRectMake(55*widthRate, (DeviceMaxHeight-210*widthRate)/2, 210*widthRate, 210*widthRate);
//    [scanZomeBack setFrame:mImagerect];
//    CGRect scanCrop=[self getScanCrop:mImagerect readerViewBounds:self.frame];
//    [self addSubview:scanZomeBack];
//    
//    //获取摄像设备
//    AVCaptureDevice * device = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];
//    //创建输入流
//    AVCaptureDeviceInput * input = [AVCaptureDeviceInput deviceInputWithDevice:device error:nil];
//    //创建输出流
//    AVCaptureMetadataOutput * output = [[AVCaptureMetadataOutput alloc]init];
//    //设置代理 在主线程里刷新
//    [output setMetadataObjectsDelegate:self queue:dispatch_get_main_queue()];
//    output.rectOfInterest = scanCrop;
//    
//    //初始化链接对象
//    session = [[AVCaptureSession alloc]init];
//    //高质量采集率
//    [session setSessionPreset:AVCaptureSessionPresetHigh];
//    if (input) {
//        [session addInput:input];
//    }
//    if (output) {
//        [session addOutput:output];
//        //设置扫码支持的编码格式(如下设置条形码和二维码兼容)
//        NSMutableArray *a = [[NSMutableArray alloc] init];
//        if ([output.availableMetadataObjectTypes containsObject:AVMetadataObjectTypeQRCode]) {
//            [a addObject:AVMetadataObjectTypeQRCode];
//        }
//        if ([output.availableMetadataObjectTypes containsObject:AVMetadataObjectTypeEAN13Code]) {
//            [a addObject:AVMetadataObjectTypeEAN13Code];
//        }
//        if ([output.availableMetadataObjectTypes containsObject:AVMetadataObjectTypeEAN8Code]) {
//            [a addObject:AVMetadataObjectTypeEAN8Code];
//        }
//        if ([output.availableMetadataObjectTypes containsObject:AVMetadataObjectTypeCode128Code]) {
//            [a addObject:AVMetadataObjectTypeCode128Code];
//        }
//        output.metadataObjectTypes=a;
//    }
//    
//    AVCaptureVideoPreviewLayer * layer = [AVCaptureVideoPreviewLayer layerWithSession:session];
//    layer.videoGravity=AVLayerVideoGravityResizeAspectFill;
//    layer.frame=self.layer.bounds;
//    [self.layer insertSublayer:layer atIndex:0];
//    
//    [self setOverlayPickerView:self];
//    
//    //开始捕获
//    [session startRunning];
//    
//    
//}
//
//-(void)loopDrawLine
//{
//    _is_AnmotionFinished = NO;
//    CGRect rect = CGRectMake(60*widthRate, (DeviceMaxHeight-200*widthRate)/2, 200*widthRate, 2);
//    if (_readLineView) {
//        _readLineView.alpha = 1;
//        _readLineView.frame = rect;
//    }
//    else{
//        _readLineView = [[UIImageView alloc] initWithFrame:rect];
//        [_readLineView setImage:[UIImage imageNamed:@"img_line"]];
//        [self addSubview:_readLineView];
//    }
//    
//    [UIView animateWithDuration:1.5 animations:^{
//        //修改fream的代码写在这里
//        _readLineView.frame =CGRectMake(60*widthRate, (DeviceMaxHeight-200*widthRate)/2+200*widthRate-5, 200*widthRate, 2);
//    } completion:^(BOOL finished) {
//        if (!_is_Anmotion) {
//            [self loopDrawLine];
//        }
//        _is_AnmotionFinished = YES;
//    }];
//}
//
//- (void)setOverlayPickerView:(QRCodeReaderView *)reader
//{
//    
//    CGFloat wid = 60*widthRate;
//    CGFloat heih = (DeviceMaxHeight-200*widthRate)/2;
//    
//    //最上部view
//    CGFloat alpha = 0.6;
//    UIView* upView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, DeviceMaxWidth, heih)];
//    upView.alpha = alpha;
//    upView.backgroundColor = [self colorFromHexRGB:contentTitleColorStr];
//    [reader addSubview:upView];
//    
//    //用于说明的label
//    UILabel * labIntroudction= [[UILabel alloc] init];
//    labIntroudction.backgroundColor = [UIColor clearColor];
//    labIntroudction.font = [UIFont systemFontOfSize:14];
//    labIntroudction.frame=CGRectMake(0, 160+(heih-64-10*widthRate)*2, DeviceMaxWidth, 50*widthRate);
//    labIntroudction.textAlignment = NSTextAlignmentCenter;
//    labIntroudction.textColor=[UIColor whiteColor];
//    labIntroudction.text=@"将二维码放入框内，即可自动扫描";
//    [upView addSubview:labIntroudction];
//    
//    //左侧的view
//    UIView * cLeftView = [[UIView alloc] initWithFrame:CGRectMake(0, heih, wid, 200*widthRate)];
//    cLeftView.alpha = alpha;
//    cLeftView.backgroundColor = [self colorFromHexRGB:contentTitleColorStr];
//    [reader addSubview:cLeftView];
//    
//    //右侧的view
//    UIView *rightView = [[UIView alloc] initWithFrame:CGRectMake(DeviceMaxWidth-wid, heih, wid, 200*widthRate)];
//    rightView.alpha = alpha;
//    rightView.backgroundColor = [self colorFromHexRGB:contentTitleColorStr];
//    [reader addSubview:rightView];
//    
//    //底部view
//    UIView * downView = [[UIView alloc] initWithFrame:CGRectMake(0, heih+200*widthRate, DeviceMaxWidth, DeviceMaxHeight - heih-200*widthRate)];
//    downView.alpha = alpha;
//    downView.backgroundColor = [self colorFromHexRGB:contentTitleColorStr];
//    [reader addSubview:downView];
//    
//    //开关灯button
//    UIButton * turnBtn = [UIButton buttonWithType:UIButtonTypeCustom];
//    turnBtn.backgroundColor = [UIColor clearColor];
//    [turnBtn setBackgroundImage:[UIImage imageNamed:@"ic_lamp_normal"] forState:UIControlStateNormal];
//    [turnBtn setBackgroundImage:[UIImage imageNamed:@"ic_lamp_pressed"] forState:UIControlStateSelected];
//    turnBtn.frame=CGRectMake((DeviceMaxWidth-50*widthRate)/2, (CGRectGetHeight(downView.frame)-50*widthRate)/2, 35*widthRate, 35*widthRate);
//    [turnBtn addTarget:self action:@selector(turnBtnEvent:) forControlEvents:UIControlEventTouchUpInside];
//    [downView addSubview:turnBtn];
//    
//}
//
//- (void)turnBtnEvent:(UIButton *)button_
//{
//    button_.selected = !button_.selected;
//    if (button_.selected) {
//        [self turnTorchOn:YES];
//    }
//    else{
//        [self turnTorchOn:NO];
//    }
//    
//}
//
//- (void)turnTorchOn:(bool)on
//{
//    Class captureDeviceClass = NSClassFromString(@"AVCaptureDevice");
//    if (captureDeviceClass != nil) {
//        AVCaptureDevice *device = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];
//        
//        if ([device hasTorch] && [device hasFlash]){
//            
//            [device lockForConfiguration:nil];
//            if (on) {
//                [device setTorchMode:AVCaptureTorchModeOn];
//                [device setFlashMode:AVCaptureFlashModeOn];
//                
//            } else {
//                [device setTorchMode:AVCaptureTorchModeOff];
//                [device setFlashMode:AVCaptureFlashModeOff];
//            }
//            [device unlockForConfiguration];
//        }
//    }
//}
//
//-(CGRect)getScanCrop:(CGRect)rect readerViewBounds:(CGRect)readerViewBounds
//{
//    
//    CGFloat x,y,width,height;
//    
////    width = (CGFloat)(rect.size.height+10)/readerViewBounds.size.height;
////    
////    height = (CGFloat)(rect.size.width-50)/readerViewBounds.size.width;
////    
////    x = (1-width)/2;
////    y = (1-height)/2;
//    
//    x = (CGRectGetHeight(readerViewBounds)-CGRectGetHeight(rect))/2/CGRectGetHeight(readerViewBounds);
//    y = (CGRectGetWidth(readerViewBounds)-CGRectGetWidth(rect))/2/CGRectGetWidth(readerViewBounds);
//    width = CGRectGetHeight(rect)/CGRectGetHeight(readerViewBounds);
//    height = CGRectGetWidth(rect)/CGRectGetWidth(readerViewBounds);
//    
//    return CGRectMake(x, y, width, height);
//    
//}
//
//- (void)start
//{
//    [session startRunning];
//}
//
//- (void)stop
//{
//    [session stopRunning];
//}
//
//#pragma mark - 扫描结果
//- (void)captureOutput:(AVCaptureOutput *)captureOutput didOutputMetadataObjects:(NSArray *)metadataObjects fromConnection:(AVCaptureConnection *)connection
//{
//    if (metadataObjects && metadataObjects.count>0) {
//        AVMetadataMachineReadableCodeObject * metadataObject = [metadataObjects objectAtIndex : 0 ];
//        //输出扫描字符串
//        if (_delegate && [_delegate respondsToSelector:@selector(readerScanResult:)]) {
//            [_delegate readerScanResult:metadataObject.stringValue];
//        }
//    }
//}
//
//#pragma mark - 颜色
////获取颜色
//- (UIColor *)colorFromHexRGB:(NSString *)inColorString
//{
//    UIColor *result = nil;
//    unsigned int colorCode = 0;
//    unsigned char redByte, greenByte, blueByte;
//    
//    if (nil != inColorString)
//    {
//        NSScanner *scanner = [NSScanner scannerWithString:inColorString];
//        (void) [scanner scanHexInt:&colorCode]; // ignore error
//    }
//    redByte = (unsigned char) (colorCode >> 16);
//    greenByte = (unsigned char) (colorCode >> 8);
//    blueByte = (unsigned char) (colorCode); // masks off high bits
//    result = [UIColor
//              colorWithRed: (float)redByte / 0xff
//              green: (float)greenByte/ 0xff
//              blue: (float)blueByte / 0xff
//              alpha:1.0];
//    return result;
//}


@end
